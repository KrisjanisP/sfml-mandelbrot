
void precompute_mandelbrot_colors()
{
    float ultraFractalPos[5] = {0.0,0.16,0.42,0.6425,1};
    sf::Uint8 ultraFractalRGB[5][3] = {{0,7,100},{32,107,203},{237,255,255},{255,170,0},{0,2,0}};
    for(int i=0;i<5;i++) ultraFractalPos[i]*=COLORS;
    for(int pos=0;pos<COLORS;pos++)
    {
        for(int i=1;i<5;i++)
        {
            if(pos<=ultraFractalPos[i])
            {
                sf::Uint8* aRGB = ultraFractalRGB[i-1];
                sf::Uint8* bRGB = ultraFractalRGB[i];
                this->colors[pos][0] = aRGB[0]+(bRGB[0]-aRGB[0])*((pos-ultraFractalPos[i-1])/(ultraFractalPos[i]-ultraFractalPos[i-1]));
                this->colors[pos][1] = aRGB[1]+(bRGB[1]-aRGB[1])*((pos-ultraFractalPos[i-1])/(ultraFractalPos[i]-ultraFractalPos[i-1]));
                this->colors[pos][2] = aRGB[2]+(bRGB[2]-aRGB[2])*((pos-ultraFractalPos[i-1])/(ultraFractalPos[i]-ultraFractalPos[i-1]));
                break;
            }
        }
    }
}

void get_mandelbrot_pixel_color(int iters, sf::Uint8 rgb[3], float x, float y)
{
    int i = (iters*(COLORS-1))/precision;
    rgb[0] = this->colors[i][0];
    rgb[1] = this->colors[i][1];
    rgb[2] = this->colors[i][2];
}